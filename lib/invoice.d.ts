import Promise = require("promise");
import ProcessOut = require("./processout");
declare class Invoice {
    private client;
    /**
     * ID of the invoice
     * @type {string}
     */
    private id;
    /**
     * Project to which the invoice belongs
     * @type {any}
     */
    private project;
    /**
     * ID of the project to which the invoice belongs
     * @type {string}
     */
    private projectId;
    /**
     * Transaction generated by the invoice
     * @type {any}
     */
    private transaction;
    /**
     * ID of the transaction generated by the invoice
     * @type {string}
     */
    private transactionId;
    /**
     * Customer linked to the invoice, if any
     * @type {any}
     */
    private customer;
    /**
     * ID of the customer linked to the invoice, if any
     * @type {string}
     */
    private customerId;
    /**
     * Subscription to which the invoice is linked to, if any
     * @type {any}
     */
    private subscription;
    /**
     * ID of the subscription to which the invoice is linked to, if any
     * @type {string}
     */
    private subscriptionId;
    /**
     * Token used to pay the invoice, if any
     * @type {any}
     */
    private token;
    /**
     * ID of the token used to pay the invoice, if any
     * @type {string}
     */
    private tokenId;
    /**
     * Details of the invoice
     * @type {any}
     */
    private details;
    /**
     * URL to which you may redirect your customer to proceed with the payment
     * @type {string}
     */
    private url;
    /**
     * Name of the invoice
     * @type {string}
     */
    private name;
    /**
     * Amount to be paid
     * @type {string}
     */
    private amount;
    /**
     * Currency of the invoice
     * @type {string}
     */
    private currency;
    /**
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @type {string}
     */
    private merchantInitiatorType;
    /**
     * Statement to be shown on the bank statement of your customer
     * @type {string}
     */
    private statementDescriptor;
    /**
     * Support phone number shown on the customer's bank statement
     * @type {string}
     */
    private statementDescriptorPhone;
    /**
     * City shown on the customer's bank statement
     * @type {string}
     */
    private statementDescriptorCity;
    /**
     * Your company name shown on the customer's bank statement
     * @type {string}
     */
    private statementDescriptorCompany;
    /**
     * URL shown on the customer's bank statement
     * @type {string}
     */
    private statementDescriptorUrl;
    /**
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @type {any}
     */
    private metadata;
    /**
     * URL where the customer will be redirected upon payment
     * @type {string}
     */
    private returnUrl;
    /**
     * URL where the customer will be redirected if the payment was canceled
     * @type {string}
     */
    private cancelUrl;
    /**
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @type {string}
     */
    private webhookUrl;
    /**
     * Define whether or not the invoice is in sandbox environment
     * @type {boolean}
     */
    private sandbox;
    /**
     * Date at which the invoice was created
     * @type {string}
     */
    private createdAt;
    /**
     * Risk information
     * @type {any}
     */
    private risk;
    /**
     * Shipping information
     * @type {any}
     */
    private shipping;
    /**
     * Device information
     * @type {any}
     */
    private device;
    /**
     * Invoice constructor
     * @param {ProcessOut} client
     * @param {array} prefill (optional)
     */
    constructor(client: ProcessOut, prefill: Invoice);
    getProcessOutObjectClass(): string;
    /**
     * Get Id
     * ID of the invoice
     * @return {string}
     */
    getId(): string;
    /**
     * Set Id
     * ID of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    setId(val: string): Invoice;
    /**
     * Get Project
     * Project to which the invoice belongs
     * @return {any}
     */
    getProject(): any;
    /**
     * Set Project
     * Project to which the invoice belongs
     * @param {any} val
     * @return {Invoice}
     */
    setProject(val: any): Invoice;
    /**
     * Get ProjectId
     * ID of the project to which the invoice belongs
     * @return {string}
     */
    getProjectId(): string;
    /**
     * Set ProjectId
     * ID of the project to which the invoice belongs
     * @param {string} val
     * @return {Invoice}
     */
    setProjectId(val: string): Invoice;
    /**
     * Get Transaction
     * Transaction generated by the invoice
     * @return {any}
     */
    getTransaction(): any;
    /**
     * Set Transaction
     * Transaction generated by the invoice
     * @param {any} val
     * @return {Invoice}
     */
    setTransaction(val: any): Invoice;
    /**
     * Get TransactionId
     * ID of the transaction generated by the invoice
     * @return {string}
     */
    getTransactionId(): string;
    /**
     * Set TransactionId
     * ID of the transaction generated by the invoice
     * @param {string} val
     * @return {Invoice}
     */
    setTransactionId(val: string): Invoice;
    /**
     * Get Customer
     * Customer linked to the invoice, if any
     * @return {any}
     */
    getCustomer(): any;
    /**
     * Set Customer
     * Customer linked to the invoice, if any
     * @param {any} val
     * @return {Invoice}
     */
    setCustomer(val: any): Invoice;
    /**
     * Get CustomerId
     * ID of the customer linked to the invoice, if any
     * @return {string}
     */
    getCustomerId(): string;
    /**
     * Set CustomerId
     * ID of the customer linked to the invoice, if any
     * @param {string} val
     * @return {Invoice}
     */
    setCustomerId(val: string): Invoice;
    /**
     * Get Subscription
     * Subscription to which the invoice is linked to, if any
     * @return {any}
     */
    getSubscription(): any;
    /**
     * Set Subscription
     * Subscription to which the invoice is linked to, if any
     * @param {any} val
     * @return {Invoice}
     */
    setSubscription(val: any): Invoice;
    /**
     * Get SubscriptionId
     * ID of the subscription to which the invoice is linked to, if any
     * @return {string}
     */
    getSubscriptionId(): string;
    /**
     * Set SubscriptionId
     * ID of the subscription to which the invoice is linked to, if any
     * @param {string} val
     * @return {Invoice}
     */
    setSubscriptionId(val: string): Invoice;
    /**
     * Get Token
     * Token used to pay the invoice, if any
     * @return {any}
     */
    getToken(): any;
    /**
     * Set Token
     * Token used to pay the invoice, if any
     * @param {any} val
     * @return {Invoice}
     */
    setToken(val: any): Invoice;
    /**
     * Get TokenId
     * ID of the token used to pay the invoice, if any
     * @return {string}
     */
    getTokenId(): string;
    /**
     * Set TokenId
     * ID of the token used to pay the invoice, if any
     * @param {string} val
     * @return {Invoice}
     */
    setTokenId(val: string): Invoice;
    /**
     * Get Details
     * Details of the invoice
     * @return {any}
     */
    getDetails(): any;
    /**
     * Set Details
     * Details of the invoice
     * @param {any} val
     * @return {Invoice}
     */
    setDetails(val: any): Invoice;
    /**
     * Get Url
     * URL to which you may redirect your customer to proceed with the payment
     * @return {string}
     */
    getUrl(): string;
    /**
     * Set Url
     * URL to which you may redirect your customer to proceed with the payment
     * @param {string} val
     * @return {Invoice}
     */
    setUrl(val: string): Invoice;
    /**
     * Get Name
     * Name of the invoice
     * @return {string}
     */
    getName(): string;
    /**
     * Set Name
     * Name of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    setName(val: string): Invoice;
    /**
     * Get Amount
     * Amount to be paid
     * @return {string}
     */
    getAmount(): string;
    /**
     * Set Amount
     * Amount to be paid
     * @param {string} val
     * @return {Invoice}
     */
    setAmount(val: string): Invoice;
    /**
     * Get Currency
     * Currency of the invoice
     * @return {string}
     */
    getCurrency(): string;
    /**
     * Set Currency
     * Currency of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    setCurrency(val: string): Invoice;
    /**
     * Get MerchantInitiatorType
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @return {string}
     */
    getMerchantInitiatorType(): string;
    /**
     * Set MerchantInitiatorType
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @param {string} val
     * @return {Invoice}
     */
    setMerchantInitiatorType(val: string): Invoice;
    /**
     * Get StatementDescriptor
     * Statement to be shown on the bank statement of your customer
     * @return {string}
     */
    getStatementDescriptor(): string;
    /**
     * Set StatementDescriptor
     * Statement to be shown on the bank statement of your customer
     * @param {string} val
     * @return {Invoice}
     */
    setStatementDescriptor(val: string): Invoice;
    /**
     * Get StatementDescriptorPhone
     * Support phone number shown on the customer's bank statement
     * @return {string}
     */
    getStatementDescriptorPhone(): string;
    /**
     * Set StatementDescriptorPhone
     * Support phone number shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    setStatementDescriptorPhone(val: string): Invoice;
    /**
     * Get StatementDescriptorCity
     * City shown on the customer's bank statement
     * @return {string}
     */
    getStatementDescriptorCity(): string;
    /**
     * Set StatementDescriptorCity
     * City shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    setStatementDescriptorCity(val: string): Invoice;
    /**
     * Get StatementDescriptorCompany
     * Your company name shown on the customer's bank statement
     * @return {string}
     */
    getStatementDescriptorCompany(): string;
    /**
     * Set StatementDescriptorCompany
     * Your company name shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    setStatementDescriptorCompany(val: string): Invoice;
    /**
     * Get StatementDescriptorUrl
     * URL shown on the customer's bank statement
     * @return {string}
     */
    getStatementDescriptorUrl(): string;
    /**
     * Set StatementDescriptorUrl
     * URL shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    setStatementDescriptorUrl(val: string): Invoice;
    /**
     * Get Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @return {any}
     */
    getMetadata(): any;
    /**
     * Set Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @param {any} val
     * @return {Invoice}
     */
    setMetadata(val: any): Invoice;
    /**
     * Get ReturnUrl
     * URL where the customer will be redirected upon payment
     * @return {string}
     */
    getReturnUrl(): string;
    /**
     * Set ReturnUrl
     * URL where the customer will be redirected upon payment
     * @param {string} val
     * @return {Invoice}
     */
    setReturnUrl(val: string): Invoice;
    /**
     * Get CancelUrl
     * URL where the customer will be redirected if the payment was canceled
     * @return {string}
     */
    getCancelUrl(): string;
    /**
     * Set CancelUrl
     * URL where the customer will be redirected if the payment was canceled
     * @param {string} val
     * @return {Invoice}
     */
    setCancelUrl(val: string): Invoice;
    /**
     * Get WebhookUrl
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @return {string}
     */
    getWebhookUrl(): string;
    /**
     * Set WebhookUrl
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @param {string} val
     * @return {Invoice}
     */
    setWebhookUrl(val: string): Invoice;
    /**
     * Get Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @return {boolean}
     */
    getSandbox(): boolean;
    /**
     * Set Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @param {boolean} val
     * @return {Invoice}
     */
    setSandbox(val: boolean): Invoice;
    /**
     * Get CreatedAt
     * Date at which the invoice was created
     * @return {string}
     */
    getCreatedAt(): string;
    /**
     * Set CreatedAt
     * Date at which the invoice was created
     * @param {string} val
     * @return {Invoice}
     */
    setCreatedAt(val: string): Invoice;
    /**
     * Get Risk
     * Risk information
     * @return {any}
     */
    getRisk(): any;
    /**
     * Set Risk
     * Risk information
     * @param {any} val
     * @return {Invoice}
     */
    setRisk(val: any): Invoice;
    /**
     * Get Shipping
     * Shipping information
     * @return {any}
     */
    getShipping(): any;
    /**
     * Set Shipping
     * Shipping information
     * @param {any} val
     * @return {Invoice}
     */
    setShipping(val: any): Invoice;
    /**
     * Get Device
     * Device information
     * @return {any}
     */
    getDevice(): any;
    /**
     * Set Device
     * Device information
     * @param {any} val
     * @return {Invoice}
     */
    setDevice(val: any): Invoice;
    /**
     * Fills the current object with the new values pulled from the data
     * @param  {array} data
     * @return {Invoice}
     */
    fillWithData(data: any): Invoice;
    /**
     * Authorize the invoice using the given source (customer or token)
     * @param string source
     * @param {any} options
     * @return {Transaction}
     */
    authorize(source: any, options: any): Promise<any>;
    /**
     * Capture the invoice using the given source (customer or token)
     * @param string source
     * @param {any} options
     * @return {Transaction}
     */
    capture(source: any, options: any): Promise<any>;
    /**
     * Get the customer linked to the invoice.

     * @param {any} options
     * @return {Customer}
     */
    fetchCustomer(options: any): Promise<any>;
    /**
     * Assign a customer to the invoice.
     * @param string customerId
     * @param {any} options
     * @return {Customer}
     */
    assignCustomer(customerId: any, options: any): Promise<any>;
    /**
     * Initiate a 3-D Secure authentication
     * @param string source
     * @param {any} options
     * @return {CustomerAction}
     */
    initiateThreeDS(source: any, options: any): Promise<any>;
    /**
     * Get the transaction of the invoice.

     * @param {any} options
     * @return {Transaction}
     */
    fetchTransaction(options: any): Promise<any>;
    /**
     * Void the invoice

     * @param {any} options
     * @return {Transaction}
     */
    void(options: any): Promise<any>;
    /**
     * Get all the invoices.
     *
     * @param {any} options
     * @return {array}
     */
    all(options: any): Promise<any>;
    /**
     * Create a new invoice.
     *
     * @param {any} options
     * @return {this}
     */
    create(options: any): Promise<any>;
    /**
     * Find an invoice by its ID.
     * @param string invoiceId
     * @param {any} options
     * @return {this}
     */
    find(invoiceId: any, options: any): Promise<any>;
}
export = Invoice;
//# sourceMappingURL=invoice.d.ts.map