"use strict";
// The content of this file was automatically generated
var Promise = require("promise");
var Response = require("./networking/response");
var Request = require("./networking/request");
var Invoice = /** @class */ (function () {
    /**
     * Invoice constructor
     * @param {ProcessOut} client
     * @param {array} prefill (optional)
     */
    function Invoice(client, prefill) {
        this.client = null;
        /**
         * ID of the invoice
         * @type {string}
         */
        this.id = null;
        /**
         * Project to which the invoice belongs
         * @type {any}
         */
        this.project = null;
        /**
         * ID of the project to which the invoice belongs
         * @type {string}
         */
        this.projectId = null;
        /**
         * Transaction generated by the invoice
         * @type {any}
         */
        this.transaction = null;
        /**
         * ID of the transaction generated by the invoice
         * @type {string}
         */
        this.transactionId = null;
        /**
         * Customer linked to the invoice, if any
         * @type {any}
         */
        this.customer = null;
        /**
         * ID of the customer linked to the invoice, if any
         * @type {string}
         */
        this.customerId = null;
        /**
         * Subscription to which the invoice is linked to, if any
         * @type {any}
         */
        this.subscription = null;
        /**
         * ID of the subscription to which the invoice is linked to, if any
         * @type {string}
         */
        this.subscriptionId = null;
        /**
         * Token used to pay the invoice, if any
         * @type {any}
         */
        this.token = null;
        /**
         * ID of the token used to pay the invoice, if any
         * @type {string}
         */
        this.tokenId = null;
        /**
         * Details of the invoice
         * @type {any}
         */
        this.details = null;
        /**
         * URL to which you may redirect your customer to proceed with the payment
         * @type {string}
         */
        this.url = null;
        /**
         * Name of the invoice
         * @type {string}
         */
        this.name = null;
        /**
         * Amount to be paid
         * @type {string}
         */
        this.amount = null;
        /**
         * Currency of the invoice
         * @type {string}
         */
        this.currency = null;
        /**
         * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
         * @type {string}
         */
        this.merchantInitiatorType = null;
        /**
         * Statement to be shown on the bank statement of your customer
         * @type {string}
         */
        this.statementDescriptor = null;
        /**
         * Support phone number shown on the customer's bank statement
         * @type {string}
         */
        this.statementDescriptorPhone = null;
        /**
         * City shown on the customer's bank statement
         * @type {string}
         */
        this.statementDescriptorCity = null;
        /**
         * Your company name shown on the customer's bank statement
         * @type {string}
         */
        this.statementDescriptorCompany = null;
        /**
         * URL shown on the customer's bank statement
         * @type {string}
         */
        this.statementDescriptorUrl = null;
        /**
         * Metadata related to the invoice, in the form of a dictionary (key-value pair)
         * @type {any}
         */
        this.metadata = null;
        /**
         * URL where the customer will be redirected upon payment
         * @type {string}
         */
        this.returnUrl = null;
        /**
         * URL where the customer will be redirected if the payment was canceled
         * @type {string}
         */
        this.cancelUrl = null;
        /**
         * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
         * @type {string}
         */
        this.webhookUrl = null;
        /**
         * Define whether or not the invoice is in sandbox environment
         * @type {boolean}
         */
        this.sandbox = null;
        /**
         * Date at which the invoice was created
         * @type {string}
         */
        this.createdAt = null;
        /**
         * Risk information
         * @type {any}
         */
        this.risk = null;
        /**
         * Shipping information
         * @type {any}
         */
        this.shipping = null;
        /**
         * Device information
         * @type {any}
         */
        this.device = null;
        if (typeof client === 'undefined')
            throw new Error("The Invoice object must be instanciated with the ProcessOut client. You can create one using new ProcessOut('project-id', 'project-secret').newInvoice()");
        this.client = client;
        if (typeof prefill !== 'undefined')
            this.fillWithData(prefill);
    }
    Invoice.prototype.getProcessOutObjectClass = function () {
        return "Invoice";
    };
    /**
     * Get Id
     * ID of the invoice
     * @return {string}
     */
    Invoice.prototype.getId = function () {
        return this.id;
    };
    /**
     * Set Id
     * ID of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setId = function (val) {
        this.id = val;
        return this;
    };
    /**
     * Get Project
     * Project to which the invoice belongs
     * @return {any}
     */
    Invoice.prototype.getProject = function () {
        return this.project;
    };
    /**
     * Set Project
     * Project to which the invoice belongs
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setProject = function (val) {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newProject().getProcessOutObjectClass())
            this.project = val;
        else {
            var obj = this.client.newProject();
            obj.fillWithData(val);
            this.project = obj;
        }
        return this;
    };
    /**
     * Get ProjectId
     * ID of the project to which the invoice belongs
     * @return {string}
     */
    Invoice.prototype.getProjectId = function () {
        return this.projectId;
    };
    /**
     * Set ProjectId
     * ID of the project to which the invoice belongs
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setProjectId = function (val) {
        this.projectId = val;
        return this;
    };
    /**
     * Get Transaction
     * Transaction generated by the invoice
     * @return {any}
     */
    Invoice.prototype.getTransaction = function () {
        return this.transaction;
    };
    /**
     * Set Transaction
     * Transaction generated by the invoice
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setTransaction = function (val) {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newTransaction().getProcessOutObjectClass())
            this.transaction = val;
        else {
            var obj = this.client.newTransaction();
            obj.fillWithData(val);
            this.transaction = obj;
        }
        return this;
    };
    /**
     * Get TransactionId
     * ID of the transaction generated by the invoice
     * @return {string}
     */
    Invoice.prototype.getTransactionId = function () {
        return this.transactionId;
    };
    /**
     * Set TransactionId
     * ID of the transaction generated by the invoice
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setTransactionId = function (val) {
        this.transactionId = val;
        return this;
    };
    /**
     * Get Customer
     * Customer linked to the invoice, if any
     * @return {any}
     */
    Invoice.prototype.getCustomer = function () {
        return this.customer;
    };
    /**
     * Set Customer
     * Customer linked to the invoice, if any
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setCustomer = function (val) {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newCustomer().getProcessOutObjectClass())
            this.customer = val;
        else {
            var obj = this.client.newCustomer();
            obj.fillWithData(val);
            this.customer = obj;
        }
        return this;
    };
    /**
     * Get CustomerId
     * ID of the customer linked to the invoice, if any
     * @return {string}
     */
    Invoice.prototype.getCustomerId = function () {
        return this.customerId;
    };
    /**
     * Set CustomerId
     * ID of the customer linked to the invoice, if any
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setCustomerId = function (val) {
        this.customerId = val;
        return this;
    };
    /**
     * Get Subscription
     * Subscription to which the invoice is linked to, if any
     * @return {any}
     */
    Invoice.prototype.getSubscription = function () {
        return this.subscription;
    };
    /**
     * Set Subscription
     * Subscription to which the invoice is linked to, if any
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setSubscription = function (val) {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newSubscription().getProcessOutObjectClass())
            this.subscription = val;
        else {
            var obj = this.client.newSubscription();
            obj.fillWithData(val);
            this.subscription = obj;
        }
        return this;
    };
    /**
     * Get SubscriptionId
     * ID of the subscription to which the invoice is linked to, if any
     * @return {string}
     */
    Invoice.prototype.getSubscriptionId = function () {
        return this.subscriptionId;
    };
    /**
     * Set SubscriptionId
     * ID of the subscription to which the invoice is linked to, if any
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setSubscriptionId = function (val) {
        this.subscriptionId = val;
        return this;
    };
    /**
     * Get Token
     * Token used to pay the invoice, if any
     * @return {any}
     */
    Invoice.prototype.getToken = function () {
        return this.token;
    };
    /**
     * Set Token
     * Token used to pay the invoice, if any
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setToken = function (val) {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newToken().getProcessOutObjectClass())
            this.token = val;
        else {
            var obj = this.client.newToken();
            obj.fillWithData(val);
            this.token = obj;
        }
        return this;
    };
    /**
     * Get TokenId
     * ID of the token used to pay the invoice, if any
     * @return {string}
     */
    Invoice.prototype.getTokenId = function () {
        return this.tokenId;
    };
    /**
     * Set TokenId
     * ID of the token used to pay the invoice, if any
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setTokenId = function (val) {
        this.tokenId = val;
        return this;
    };
    /**
     * Get Details
     * Details of the invoice
     * @return {any}
     */
    Invoice.prototype.getDetails = function () {
        return this.details;
    };
    /**
     * Set Details
     * Details of the invoice
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setDetails = function (val) {
        if (val.length > 0 && typeof val[0] === 'object')
            this.details = val;
        else {
            var a = [];
            for (var i = val.length; i--;) {
                var obj = this.client.newInvoiceDetail();
                obj.fillWithData(val);
                a.push(obj);
            }
            this.details = a;
        }
        return this;
    };
    /**
     * Get Url
     * URL to which you may redirect your customer to proceed with the payment
     * @return {string}
     */
    Invoice.prototype.getUrl = function () {
        return this.url;
    };
    /**
     * Set Url
     * URL to which you may redirect your customer to proceed with the payment
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setUrl = function (val) {
        this.url = val;
        return this;
    };
    /**
     * Get Name
     * Name of the invoice
     * @return {string}
     */
    Invoice.prototype.getName = function () {
        return this.name;
    };
    /**
     * Set Name
     * Name of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setName = function (val) {
        this.name = val;
        return this;
    };
    /**
     * Get Amount
     * Amount to be paid
     * @return {string}
     */
    Invoice.prototype.getAmount = function () {
        return this.amount;
    };
    /**
     * Set Amount
     * Amount to be paid
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setAmount = function (val) {
        this.amount = val;
        return this;
    };
    /**
     * Get Currency
     * Currency of the invoice
     * @return {string}
     */
    Invoice.prototype.getCurrency = function () {
        return this.currency;
    };
    /**
     * Set Currency
     * Currency of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setCurrency = function (val) {
        this.currency = val;
        return this;
    };
    /**
     * Get MerchantInitiatorType
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @return {string}
     */
    Invoice.prototype.getMerchantInitiatorType = function () {
        return this.merchantInitiatorType;
    };
    /**
     * Set MerchantInitiatorType
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setMerchantInitiatorType = function (val) {
        this.merchantInitiatorType = val;
        return this;
    };
    /**
     * Get StatementDescriptor
     * Statement to be shown on the bank statement of your customer
     * @return {string}
     */
    Invoice.prototype.getStatementDescriptor = function () {
        return this.statementDescriptor;
    };
    /**
     * Set StatementDescriptor
     * Statement to be shown on the bank statement of your customer
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setStatementDescriptor = function (val) {
        this.statementDescriptor = val;
        return this;
    };
    /**
     * Get StatementDescriptorPhone
     * Support phone number shown on the customer's bank statement
     * @return {string}
     */
    Invoice.prototype.getStatementDescriptorPhone = function () {
        return this.statementDescriptorPhone;
    };
    /**
     * Set StatementDescriptorPhone
     * Support phone number shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setStatementDescriptorPhone = function (val) {
        this.statementDescriptorPhone = val;
        return this;
    };
    /**
     * Get StatementDescriptorCity
     * City shown on the customer's bank statement
     * @return {string}
     */
    Invoice.prototype.getStatementDescriptorCity = function () {
        return this.statementDescriptorCity;
    };
    /**
     * Set StatementDescriptorCity
     * City shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setStatementDescriptorCity = function (val) {
        this.statementDescriptorCity = val;
        return this;
    };
    /**
     * Get StatementDescriptorCompany
     * Your company name shown on the customer's bank statement
     * @return {string}
     */
    Invoice.prototype.getStatementDescriptorCompany = function () {
        return this.statementDescriptorCompany;
    };
    /**
     * Set StatementDescriptorCompany
     * Your company name shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setStatementDescriptorCompany = function (val) {
        this.statementDescriptorCompany = val;
        return this;
    };
    /**
     * Get StatementDescriptorUrl
     * URL shown on the customer's bank statement
     * @return {string}
     */
    Invoice.prototype.getStatementDescriptorUrl = function () {
        return this.statementDescriptorUrl;
    };
    /**
     * Set StatementDescriptorUrl
     * URL shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setStatementDescriptorUrl = function (val) {
        this.statementDescriptorUrl = val;
        return this;
    };
    /**
     * Get Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @return {any}
     */
    Invoice.prototype.getMetadata = function () {
        return this.metadata;
    };
    /**
     * Set Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setMetadata = function (val) {
        this.metadata = val;
        return this;
    };
    /**
     * Get ReturnUrl
     * URL where the customer will be redirected upon payment
     * @return {string}
     */
    Invoice.prototype.getReturnUrl = function () {
        return this.returnUrl;
    };
    /**
     * Set ReturnUrl
     * URL where the customer will be redirected upon payment
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setReturnUrl = function (val) {
        this.returnUrl = val;
        return this;
    };
    /**
     * Get CancelUrl
     * URL where the customer will be redirected if the payment was canceled
     * @return {string}
     */
    Invoice.prototype.getCancelUrl = function () {
        return this.cancelUrl;
    };
    /**
     * Set CancelUrl
     * URL where the customer will be redirected if the payment was canceled
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setCancelUrl = function (val) {
        this.cancelUrl = val;
        return this;
    };
    /**
     * Get WebhookUrl
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @return {string}
     */
    Invoice.prototype.getWebhookUrl = function () {
        return this.webhookUrl;
    };
    /**
     * Set WebhookUrl
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setWebhookUrl = function (val) {
        this.webhookUrl = val;
        return this;
    };
    /**
     * Get Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @return {boolean}
     */
    Invoice.prototype.getSandbox = function () {
        return this.sandbox;
    };
    /**
     * Set Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @param {boolean} val
     * @return {Invoice}
     */
    Invoice.prototype.setSandbox = function (val) {
        this.sandbox = val;
        return this;
    };
    /**
     * Get CreatedAt
     * Date at which the invoice was created
     * @return {string}
     */
    Invoice.prototype.getCreatedAt = function () {
        return this.createdAt;
    };
    /**
     * Set CreatedAt
     * Date at which the invoice was created
     * @param {string} val
     * @return {Invoice}
     */
    Invoice.prototype.setCreatedAt = function (val) {
        this.createdAt = val;
        return this;
    };
    /**
     * Get Risk
     * Risk information
     * @return {any}
     */
    Invoice.prototype.getRisk = function () {
        return this.risk;
    };
    /**
     * Set Risk
     * Risk information
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setRisk = function (val) {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newInvoiceRisk().getProcessOutObjectClass())
            this.risk = val;
        else {
            var obj = this.client.newInvoiceRisk();
            obj.fillWithData(val);
            this.risk = obj;
        }
        return this;
    };
    /**
     * Get Shipping
     * Shipping information
     * @return {any}
     */
    Invoice.prototype.getShipping = function () {
        return this.shipping;
    };
    /**
     * Set Shipping
     * Shipping information
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setShipping = function (val) {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newInvoiceShipping().getProcessOutObjectClass())
            this.shipping = val;
        else {
            var obj = this.client.newInvoiceShipping();
            obj.fillWithData(val);
            this.shipping = obj;
        }
        return this;
    };
    /**
     * Get Device
     * Device information
     * @return {any}
     */
    Invoice.prototype.getDevice = function () {
        return this.device;
    };
    /**
     * Set Device
     * Device information
     * @param {any} val
     * @return {Invoice}
     */
    Invoice.prototype.setDevice = function (val) {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newInvoiceDevice().getProcessOutObjectClass())
            this.device = val;
        else {
            var obj = this.client.newInvoiceDevice();
            obj.fillWithData(val);
            this.device = obj;
        }
        return this;
    };
    /**
     * Fills the current object with the new values pulled from the data
     * @param  {array} data
     * @return {Invoice}
     */
    Invoice.prototype.fillWithData = function (data) {
        if (data["id"])
            this.setId(data["id"]);
        if (data["project"])
            this.setProject(data["project"]);
        if (data["project_id"])
            this.setProjectId(data["project_id"]);
        if (data["transaction"])
            this.setTransaction(data["transaction"]);
        if (data["transaction_id"])
            this.setTransactionId(data["transaction_id"]);
        if (data["customer"])
            this.setCustomer(data["customer"]);
        if (data["customer_id"])
            this.setCustomerId(data["customer_id"]);
        if (data["subscription"])
            this.setSubscription(data["subscription"]);
        if (data["subscription_id"])
            this.setSubscriptionId(data["subscription_id"]);
        if (data["token"])
            this.setToken(data["token"]);
        if (data["token_id"])
            this.setTokenId(data["token_id"]);
        if (data["details"])
            this.setDetails(data["details"]);
        if (data["url"])
            this.setUrl(data["url"]);
        if (data["name"])
            this.setName(data["name"]);
        if (data["amount"])
            this.setAmount(data["amount"]);
        if (data["currency"])
            this.setCurrency(data["currency"]);
        if (data["merchant_initiator_type"])
            this.setMerchantInitiatorType(data["merchant_initiator_type"]);
        if (data["statement_descriptor"])
            this.setStatementDescriptor(data["statement_descriptor"]);
        if (data["statement_descriptor_phone"])
            this.setStatementDescriptorPhone(data["statement_descriptor_phone"]);
        if (data["statement_descriptor_city"])
            this.setStatementDescriptorCity(data["statement_descriptor_city"]);
        if (data["statement_descriptor_company"])
            this.setStatementDescriptorCompany(data["statement_descriptor_company"]);
        if (data["statement_descriptor_url"])
            this.setStatementDescriptorUrl(data["statement_descriptor_url"]);
        if (data["metadata"])
            this.setMetadata(data["metadata"]);
        if (data["return_url"])
            this.setReturnUrl(data["return_url"]);
        if (data["cancel_url"])
            this.setCancelUrl(data["cancel_url"]);
        if (data["webhook_url"])
            this.setWebhookUrl(data["webhook_url"]);
        if (data["sandbox"])
            this.setSandbox(data["sandbox"]);
        if (data["created_at"])
            this.setCreatedAt(data["created_at"]);
        if (data["risk"])
            this.setRisk(data["risk"]);
        if (data["shipping"])
            this.setShipping(data["shipping"]);
        if (data["device"])
            this.setDevice(data["device"]);
        return this;
    };
    /**
     * Authorize the invoice using the given source (customer or token)
     * @param string source
     * @param {any} options
     * @return {Transaction}
     */
    Invoice.prototype.authorize = function (source, options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices/" + encodeURI(this.getId()) + "/authorize";
        var data = {
            'synchronous': (options['synchronous']) ? options['synchronous'] : null,
            'retry_drop_liability_shift': (options['retry_drop_liability_shift']) ? options['retry_drop_liability_shift'] : null,
            'capture_amount': (options['capture_amount']) ? options['capture_amount'] : null,
            'enable_three_d_s_2': (options['enable_three_d_s_2']) ? options['enable_three_d_s_2'] : null,
            'auto_capture_at': (options['auto_capture_at']) ? options['auto_capture_at'] : null,
            'source': source
        };
        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['transaction'];
                var obj = cur.client.newTransaction();
                returnValues.push(obj.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Capture the invoice using the given source (customer or token)
     * @param string source
     * @param {any} options
     * @return {Transaction}
     */
    Invoice.prototype.capture = function (source, options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices/" + encodeURI(this.getId()) + "/capture";
        var data = {
            'authorize_only': (options['authorize_only']) ? options['authorize_only'] : null,
            'synchronous': (options['synchronous']) ? options['synchronous'] : null,
            'retry_drop_liability_shift': (options['retry_drop_liability_shift']) ? options['retry_drop_liability_shift'] : null,
            'capture_amount': (options['capture_amount']) ? options['capture_amount'] : null,
            'auto_capture_at': (options['auto_capture_at']) ? options['auto_capture_at'] : null,
            'enable_three_d_s_2': (options['enable_three_d_s_2']) ? options['enable_three_d_s_2'] : null,
            'source': source
        };
        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['transaction'];
                var obj = cur.client.newTransaction();
                returnValues.push(obj.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Get the customer linked to the invoice.

     * @param {any} options
     * @return {Customer}
     */
    Invoice.prototype.fetchCustomer = function (options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices/" + encodeURI(this.getId()) + "/customers";
        var data = {};
        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['customer'];
                var obj = cur.client.newCustomer();
                returnValues.push(obj.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Assign a customer to the invoice.
     * @param string customerId
     * @param {any} options
     * @return {Customer}
     */
    Invoice.prototype.assignCustomer = function (customerId, options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices/" + encodeURI(this.getId()) + "/customers";
        var data = {
            'customer_id': customerId
        };
        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['customer'];
                var obj = cur.client.newCustomer();
                returnValues.push(obj.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Initiate a 3-D Secure authentication
     * @param string source
     * @param {any} options
     * @return {CustomerAction}
     */
    Invoice.prototype.initiateThreeDS = function (source, options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices/" + encodeURI(this.getId()) + "/three-d-s";
        var data = {
            'enable_three_d_s_2': (options['enable_three_d_s_2']) ? options['enable_three_d_s_2'] : null,
            'source': source
        };
        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['customer_action'];
                var obj = cur.client.newCustomerAction();
                returnValues.push(obj.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Get the transaction of the invoice.

     * @param {any} options
     * @return {Transaction}
     */
    Invoice.prototype.fetchTransaction = function (options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices/" + encodeURI(this.getId()) + "/transactions";
        var data = {};
        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['transaction'];
                var obj = cur.client.newTransaction();
                returnValues.push(obj.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Void the invoice

     * @param {any} options
     * @return {Transaction}
     */
    Invoice.prototype.void = function (options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices/" + encodeURI(this.getId()) + "/void";
        var data = {};
        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['transaction'];
                var obj = cur.client.newTransaction();
                returnValues.push(obj.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Get all the invoices.
     *
     * @param {any} options
     * @return {array}
     */
    Invoice.prototype.all = function (options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices";
        var data = {};
        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var a = [];
                var body = response.body['invoices'];
                for (var i = body.length; i--;) {
                    var tmp = cur.client.newInvoice();
                    tmp.fillWithData(body[i]);
                    a.push(tmp);
                }
                returnValues.push(a);
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Create a new invoice.
     *
     * @param {any} options
     * @return {this}
     */
    Invoice.prototype.create = function (options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices";
        var data = {
            'customer_id': this.getCustomerId(),
            'name': this.getName(),
            'amount': this.getAmount(),
            'currency': this.getCurrency(),
            'metadata': this.getMetadata(),
            'details': this.getDetails(),
            'merchant_initiator_type': this.getMerchantInitiatorType(),
            'statement_descriptor': this.getStatementDescriptor(),
            'statement_descriptor_phone': this.getStatementDescriptorPhone(),
            'statement_descriptor_city': this.getStatementDescriptorCity(),
            'statement_descriptor_company': this.getStatementDescriptorCompany(),
            'statement_descriptor_url': this.getStatementDescriptorUrl(),
            'return_url': this.getReturnUrl(),
            'cancel_url': this.getCancelUrl(),
            'webhook_url': this.getWebhookUrl(),
            'risk': this.getRisk(),
            'shipping': this.getShipping(),
            'device': this.getDevice()
        };
        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['invoice'];
                returnValues.push(cur.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    /**
     * Find an invoice by its ID.
     * @param string invoiceId
     * @param {any} options
     * @return {this}
     */
    Invoice.prototype.find = function (invoiceId, options) {
        if (!options)
            options = {};
        this.fillWithData(options);
        var request = new Request(this.client);
        var path = "/invoices/" + encodeURI(invoiceId) + "";
        var data = {};
        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function (resolve, reject) {
            req.on('complete', function (result, r) {
                if (result instanceof Error)
                    return reject(result);
                var response = new Response(result, r);
                var err = response.check();
                if (err != null)
                    return reject(err);
                var returnValues = [];
                var body = response.body;
                body = body['invoice'];
                returnValues.push(cur.fillWithData(body));
                return resolve.apply(this, returnValues);
            }).on('timeout', function (ms) {
                reject("request timeout after " + ms + "ms");
            });
        });
    };
    return Invoice;
}());
module.exports = Invoice;
//# sourceMappingURL=invoice.js.map