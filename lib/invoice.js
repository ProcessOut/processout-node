'use strict';

var Promise  = require('promise');
var Base     = require('basejs');
var ProcessOut = require('./processout');
var Response = require('./networking/response');
var RequestProcessoutPrivate = require('./networking/requestprocessoutprivate');


var Invoice = module.exports = Base.extend({
    _instance: null,

    /**
     * ID of the invoice
     * @type string
     */
    _id: "",

    /**
     * Project to which the invoice belongs
     * @type object
     */
    _project: null,

    /**
     * Transaction generated by the invoice
     * @type object
     */
    _transaction: null,

    /**
     * Customer linked to the invoice, if any
     * @type object
     */
    _customer: null,

    /**
     * Subscription to which the invoice is linked to, if any
     * @type object
     */
    _subscription: null,

    /**
     * URL to which you may redirect your customer to proceed with the payment
     * @type string
     */
    _url: "",

    /**
     * Name of the invoice
     * @type string
     */
    _name: "",

    /**
     * Amount to be paid
     * @type string
     */
    _amount: "",

    /**
     * Currency of the invoice
     * @type string
     */
    _currency: "",

    /**
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @type dictionary
     */
    _metadata: {},

    /**
     * Choose whether or not to request the email during the checkout process
     * @type boolean
     */
    _requestEmail: false,

    /**
     * Choose whether or not to request the shipping address during the checkout process
     * @type boolean
     */
    _requestShipping: false,

    /**
     * URL where the customer will be redirected upon payment
     * @type string
     */
    _returnUrl: "",

    /**
     * URL where the customer will be redirected if the paymen was canceled
     * @type string
     */
    _cancelUrl: "",

    /**
     * Define whether or not the invoice is in sandbox environment
     * @type boolean
     */
    _sandbox: false,

    /**
     * Date at which the invoice was created
     * @type string
     */
    _createdAt: "",

    /**
     * Invoice constructor
     * @param ProcessOut|null instance
     */
    constructor: function(instance) {
        if (typeof instance === 'undefined')
            instance = ProcessOut.getDefault();

        this._instance = instance;
    },

    /**
     * Get Id
     * ID of the invoice
     * @return float
     */
    getId: function() {
        return this._id;
    },

    /**
     * Set Id
     * ID of the invoice
     * @param float val
     * @return this
     */
    setId: function(val) {
        this._id = val;
        return this;
    },

    /**
     * Get Project
     * Project to which the invoice belongs
     * @return object
     */
    getProject: function() {
        return this._project;
    },

    /**
     * Set Project
     * Project to which the invoice belongs
     * @param object val
     * @return this
     */
    setProject: function(val) {
        if (typeof val === 'object')
            this._project = val;
        else {
            var obj = new Project(this._instance);
            obj.fillWithData(val);
            this._project = obj;
        }
        return this;
    },

    /**
     * Get Transaction
     * Transaction generated by the invoice
     * @return object
     */
    getTransaction: function() {
        return this._transaction;
    },

    /**
     * Set Transaction
     * Transaction generated by the invoice
     * @param object val
     * @return this
     */
    setTransaction: function(val) {
        if (typeof val === 'object')
            this._transaction = val;
        else {
            var obj = new Transaction(this._instance);
            obj.fillWithData(val);
            this._transaction = obj;
        }
        return this;
    },

    /**
     * Get Customer
     * Customer linked to the invoice, if any
     * @return object
     */
    getCustomer: function() {
        return this._customer;
    },

    /**
     * Set Customer
     * Customer linked to the invoice, if any
     * @param object val
     * @return this
     */
    setCustomer: function(val) {
        if (typeof val === 'object')
            this._customer = val;
        else {
            var obj = new Customer(this._instance);
            obj.fillWithData(val);
            this._customer = obj;
        }
        return this;
    },

    /**
     * Get Subscription
     * Subscription to which the invoice is linked to, if any
     * @return object
     */
    getSubscription: function() {
        return this._subscription;
    },

    /**
     * Set Subscription
     * Subscription to which the invoice is linked to, if any
     * @param object val
     * @return this
     */
    setSubscription: function(val) {
        if (typeof val === 'object')
            this._subscription = val;
        else {
            var obj = new Subscription(this._instance);
            obj.fillWithData(val);
            this._subscription = obj;
        }
        return this;
    },

    /**
     * Get Url
     * URL to which you may redirect your customer to proceed with the payment
     * @return float
     */
    getUrl: function() {
        return this._url;
    },

    /**
     * Set Url
     * URL to which you may redirect your customer to proceed with the payment
     * @param float val
     * @return this
     */
    setUrl: function(val) {
        this._url = val;
        return this;
    },

    /**
     * Get Name
     * Name of the invoice
     * @return float
     */
    getName: function() {
        return this._name;
    },

    /**
     * Set Name
     * Name of the invoice
     * @param float val
     * @return this
     */
    setName: function(val) {
        this._name = val;
        return this;
    },

    /**
     * Get Amount
     * Amount to be paid
     * @return float
     */
    getAmount: function() {
        return this._amount;
    },

    /**
     * Set Amount
     * Amount to be paid
     * @param float val
     * @return this
     */
    setAmount: function(val) {
        this._amount = val;
        return this;
    },

    /**
     * Get Currency
     * Currency of the invoice
     * @return float
     */
    getCurrency: function() {
        return this._currency;
    },

    /**
     * Set Currency
     * Currency of the invoice
     * @param float val
     * @return this
     */
    setCurrency: function(val) {
        this._currency = val;
        return this;
    },

    /**
     * Get Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @return object
     */
    getMetadata: function() {
        return this._metadata;
    },

    /**
     * Set Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @param object val
     * @return this
     */
    setMetadata: function(val) {
        this._metadata = val;
        return this;
    },

    /**
     * Get RequestEmail
     * Choose whether or not to request the email during the checkout process
     * @return bool
     */
    getRequestEmail: function() {
        return this._requestEmail;
    },

    /**
     * Set RequestEmail
     * Choose whether or not to request the email during the checkout process
     * @param bool val
     * @return this
     */
    setRequestEmail: function(val) {
        this._requestEmail = val;
        return this;
    },

    /**
     * Get RequestShipping
     * Choose whether or not to request the shipping address during the checkout process
     * @return bool
     */
    getRequestShipping: function() {
        return this._requestShipping;
    },

    /**
     * Set RequestShipping
     * Choose whether or not to request the shipping address during the checkout process
     * @param bool val
     * @return this
     */
    setRequestShipping: function(val) {
        this._requestShipping = val;
        return this;
    },

    /**
     * Get ReturnUrl
     * URL where the customer will be redirected upon payment
     * @return float
     */
    getReturnUrl: function() {
        return this._returnUrl;
    },

    /**
     * Set ReturnUrl
     * URL where the customer will be redirected upon payment
     * @param float val
     * @return this
     */
    setReturnUrl: function(val) {
        this._returnUrl = val;
        return this;
    },

    /**
     * Get CancelUrl
     * URL where the customer will be redirected if the paymen was canceled
     * @return float
     */
    getCancelUrl: function() {
        return this._cancelUrl;
    },

    /**
     * Set CancelUrl
     * URL where the customer will be redirected if the paymen was canceled
     * @param float val
     * @return this
     */
    setCancelUrl: function(val) {
        this._cancelUrl = val;
        return this;
    },

    /**
     * Get Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @return bool
     */
    getSandbox: function() {
        return this._sandbox;
    },

    /**
     * Set Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @param bool val
     * @return this
     */
    setSandbox: function(val) {
        this._sandbox = val;
        return this;
    },

    /**
     * Get CreatedAt
     * Date at which the invoice was created
     * @return float
     */
    getCreatedAt: function() {
        return this._createdAt;
    },

    /**
     * Set CreatedAt
     * Date at which the invoice was created
     * @param float val
     * @return this
     */
    setCreatedAt: function(val) {
        this._createdAt = val;
        return this;
    },

    /**
     * Fills the current object with the new values pulled from the data
     * @param  array data
     * @return Invoice
     */
    fillWithData: function(data) {
        if (data["id"])
            this.setId(data["id"]);
        if (data["project"])
            this.setProject(data["project"]);
        if (data["transaction"])
            this.setTransaction(data["transaction"]);
        if (data["customer"])
            this.setCustomer(data["customer"]);
        if (data["subscription"])
            this.setSubscription(data["subscription"]);
        if (data["url"])
            this.setUrl(data["url"]);
        if (data["name"])
            this.setName(data["name"]);
        if (data["amount"])
            this.setAmount(data["amount"]);
        if (data["currency"])
            this.setCurrency(data["currency"]);
        if (data["metadata"])
            this.setMetadata(data["metadata"]);
        if (data["request_email"])
            this.setRequestEmail(data["request_email"]);
        if (data["request_shipping"])
            this.setRequestShipping(data["request_shipping"]);
        if (data["return_url"])
            this.setReturnUrl(data["return_url"]);
        if (data["cancel_url"])
            this.setCancelUrl(data["cancel_url"]);
        if (data["sandbox"])
            this.setSandbox(data["sandbox"]);
        if (data["created_at"])
            this.setCreatedAt(data["created_at"]);
        return this;
    },

    /**
     * Authorize the invoice using the given source (customer or token)
	 * @param string source
     * @param object options
     * @return bool
     */
    authorize: function(source, options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/authorize";

        var data = {
			'source': source
        };

        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                return resolve(response.isSuccess());
                
            });
        });
    },
    /**
     * Capture the invoice using the given source (customer or token)
	 * @param string source
     * @param object options
     * @return bool
     */
    capture: function(source, options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/capture";

        var data = {
			'source': source
        };

        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                return resolve(response.isSuccess());
                
            });
        });
    },
    /**
     * Get the customer linked to the invoice.

     * @param object options
     * @return Customer
     */
    customer: function(options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/customers";

        var data = {

        };

        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var body = response.body;
                body = body['customer'];
                var obj = new Customer(cur._instance);
                return resolve(obj.fillWithData(body));
                
            });
        });
    },
    /**
     * Assign a customer to the invoice.
	 * @param string customerId
     * @param object options
     * @return Customer
     */
    assignCustomer: function(customerId, options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/customers";

        var data = {
			'customer_id': customerId
        };

        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var body = response.body;
                body = body['customer'];
                var obj = new Customer(cur._instance);
                return resolve(obj.fillWithData(body));
                
            });
        });
    },
    /**
     * Get the customer action needed to be continue the payment flow on the given gateway.
	 * @param string gatewayConfigurationId
     * @param object options
     * @return CustomerAction
     */
    customerAction: function(gatewayConfigurationId, options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/gateway-configurations/" + encodeURI(gatewayConfigurationId) + "/customer-action";

        var data = {

        };

        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var body = response.body;
                body = body['customer_action'];
                var obj = new CustomerAction(cur._instance);
                return resolve(obj.fillWithData(body));
                
            });
        });
    },
    /**
     * Get the transaction of the invoice.

     * @param object options
     * @return Transaction
     */
    transaction: function(options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/transactions";

        var data = {

        };

        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var body = response.body;
                body = body['transaction'];
                var obj = new Transaction(cur._instance);
                return resolve(obj.fillWithData(body));
                
            });
        });
    },
    /**
     * Void the invoice

     * @param object options
     * @return bool
     */
    void: function(options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/void";

        var data = {

        };

        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                return resolve(response.isSuccess());
                
            });
        });
    },
    /**
     * Get all the invoices.
     * 
     * @param object options
     * @return array
     */
    all: function(options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices";

        var data = {

        };

        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var a    = [];
                var body = response.body['invoices'];
                for (var i = body.length; i--;) {
                    var tmp = new Invoice(cur._instance);
                    tmp.fillWithData(body[i]);
                    a.push(tmp);
                }

                return resolve(a);
            });
        });
    },
    /**
     * Create a new invoice.
     * 
     * @param object options
     * @return this
     */
    create: function(options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices";

        var data = {
			'name': this.getName(), 
			'amount': this.getAmount(), 
			'currency': this.getCurrency(), 
			'metadata': this.getMetadata(), 
			'request_email': this.getRequestEmail(), 
			'request_shipping': this.getRequestShipping(), 
			'return_url': this.getReturnUrl(), 
			'cancel_url': this.getCancelUrl()
        };

        var req = request.post(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var body = response.body;
                body = body['invoice'];
                return resolve(cur.fillWithData(body));
                
            });
        });
    },
    /**
     * Find an invoice by its ID.
	 * @param string invoiceId
     * @param object options
     * @return this
     */
    find: function(invoiceId, options) {
        var request = new RequestProcessoutPrivate(this._instance);
        var path    = "/invoices/" + encodeURI(invoiceId) + "";

        var data = {

        };

        var req = request.get(path, data, options);
        var cur = this;
        return new Promise(function(resolve, reject) {
            req.on('complete', function(result, r) {
                if (result instanceof Error)
                    return reject(result);

                var response = new Response(result, r);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var body = response.body;
                body = body['invoice'];
                return resolve(cur.fillWithData(body));
                
            });
        });
    },
    
}, {
    /**
     * Get all the invoices.
     * 
     * @param object options
     * @return array
     */
    all: function(options) {
        var obj = new Invoice();
        return obj.all(options);
    },

    /**
     * Find an invoice by its ID.
	 * @param string invoiceId
     * @param object options
     * @return this
     */
    find: function(invoiceId, options) {
        var obj = new Invoice();
        return obj.find(invoiceId, options);
    },

    
});
