'use strict';

// The content of this file was automatically generated

var Promise    = require('promise');
var Base       = require('basejs');
var ProcessOut = require('./processout');
var Response   = require('./networking/response');
var Request    = require('./networking/request');

var TransactionOperation = module.exports = Base.extend({
    _client: null,

    /**
     * ID of the transaction operation
     * @type {string}
     */
    _id: null,

    /**
     * Transaction to which the operation belongs
     * @type {object}
     */
    _transaction: null,

    /**
     * ID of the transaction to which the operation belongs
     * @type {string}
     */
    _transactionId: null,

    /**
     * Token that was used by the operation, if any
     * @type {object}
     */
    _token: null,

    /**
     * ID of the token was used by the operation, if any
     * @type {string}
     */
    _tokenId: null,

    /**
     * Card that was used by the operation, if any
     * @type {object}
     */
    _card: null,

    /**
     * ID of the card that was used by the operation, if any
     * @type {string}
     */
    _cardId: null,

    /**
     * Amount of the operation
     * @type {decimal}
     */
    _amount: null,

    /**
     * True if the operation is an attempt, false otherwise
     * @type {boolean}
     */
    _isAttempt: null,

    /**
     * True if the operation has failed, false otherwise
     * @type {boolean}
     */
    _hasFailed: null,

    /**
     * True if the operation amount can be accounted for, false otherwise
     * @type {boolean}
     */
    _isAccountable: null,

    /**
     * Type of the operation, such as authorization, capture, refund or void
     * @type {string}
     */
    _type: null,

    /**
     * ID of the operation done through the PSP
     * @type {string}
     */
    _gatewayOperationId: null,

    /**
     * Error code returned when attempting the operation, if any
     * @type {string}
     */
    _errorCode: null,

    /**
     * Additionnal context saved when processing the transaction on the specific PSP
     * @type {dictionary}
     */
    _gatewayData: null,

    /**
     * ThreeDS request payment data (read-only)
     * @type {object}
     */
    _paymentDataThreeDSRequest: null,

    /**
     * 3-D Secure authentication payment data (read-only)
     * @type {object}
     */
    _paymentDataThreeDSAuthentication: null,

    /**
     * Network authentication payment data (read-only)
     * @type {object}
     */
    _paymentDataNetworkAuthentication: null,

    /**
     * Metadata related to the operation, in the form of a dictionary (key-value pair)
     * @type {dictionary}
     */
    _metadata: null,

    /**
     * Gateway fee generated by the operation
     * @type {string}
     */
    _gatewayFee: null,

    /**
     * Date at which the operation was created
     * @type {string}
     */
    _createdAt: null,

    /**
     * TransactionOperation constructor
     * @param {ProcessOut} client
     * @param {array} prefill (optional)
     */
    constructor: function(client, prefill) {
        if (typeof client === 'undefined')
            throw new Error("The TransactionOperation object must be instanciated with the ProcessOut client. You can create one using new ProcessOut('project-id', 'project-secret').newTransactionOperation()");

        this._client = client;
        if (typeof prefill !== 'undefined')
            this.fillWithData(prefill);
    },

    /**
     * Get Id
     * ID of the transaction operation
     * @return {string}
     */
    getId: function() {
        return this._id;
    },

    /**
     * Set Id
     * ID of the transaction operation
     * @param {string} val
     * @return {TransactionOperation}
     */
    setId: function(val) {
        this._id = val;
        return this;
    },

    /**
     * Get Transaction
     * Transaction to which the operation belongs
     * @return {object}
     */
    getTransaction: function() {
        return this._transaction;
    },

    /**
     * Set Transaction
     * Transaction to which the operation belongs
     * @param {object} val
     * @return {TransactionOperation}
     */
    setTransaction: function(val) {
        if (typeof val.getClass === "function" &&
            val.getClass() == this._client.newTransaction().getClass())
            this._transaction = val;
        else {
            var obj = this._client.newTransaction();
            obj.fillWithData(val);
            this._transaction = obj;
        }
        return this;
    },

    /**
     * Get TransactionId
     * ID of the transaction to which the operation belongs
     * @return {string}
     */
    getTransactionId: function() {
        return this._transactionId;
    },

    /**
     * Set TransactionId
     * ID of the transaction to which the operation belongs
     * @param {string} val
     * @return {TransactionOperation}
     */
    setTransactionId: function(val) {
        this._transactionId = val;
        return this;
    },

    /**
     * Get Token
     * Token that was used by the operation, if any
     * @return {object}
     */
    getToken: function() {
        return this._token;
    },

    /**
     * Set Token
     * Token that was used by the operation, if any
     * @param {object} val
     * @return {TransactionOperation}
     */
    setToken: function(val) {
        if (typeof val.getClass === "function" &&
            val.getClass() == this._client.newToken().getClass())
            this._token = val;
        else {
            var obj = this._client.newToken();
            obj.fillWithData(val);
            this._token = obj;
        }
        return this;
    },

    /**
     * Get TokenId
     * ID of the token was used by the operation, if any
     * @return {string}
     */
    getTokenId: function() {
        return this._tokenId;
    },

    /**
     * Set TokenId
     * ID of the token was used by the operation, if any
     * @param {string} val
     * @return {TransactionOperation}
     */
    setTokenId: function(val) {
        this._tokenId = val;
        return this;
    },

    /**
     * Get Card
     * Card that was used by the operation, if any
     * @return {object}
     */
    getCard: function() {
        return this._card;
    },

    /**
     * Set Card
     * Card that was used by the operation, if any
     * @param {object} val
     * @return {TransactionOperation}
     */
    setCard: function(val) {
        if (typeof val.getClass === "function" &&
            val.getClass() == this._client.newCard().getClass())
            this._card = val;
        else {
            var obj = this._client.newCard();
            obj.fillWithData(val);
            this._card = obj;
        }
        return this;
    },

    /**
     * Get CardId
     * ID of the card that was used by the operation, if any
     * @return {string}
     */
    getCardId: function() {
        return this._cardId;
    },

    /**
     * Set CardId
     * ID of the card that was used by the operation, if any
     * @param {string} val
     * @return {TransactionOperation}
     */
    setCardId: function(val) {
        this._cardId = val;
        return this;
    },

    /**
     * Get Amount
     * Amount of the operation
     * @return {string}
     */
    getAmount: function() {
        return this._amount;
    },

    /**
     * Set Amount
     * Amount of the operation
     * @param {string} val
     * @return {TransactionOperation}
     */
    setAmount: function(val) {
        this._amount = val;
        return this;
    },

    /**
     * Get IsAttempt
     * True if the operation is an attempt, false otherwise
     * @return {bool}
     */
    getIsAttempt: function() {
        return this._isAttempt;
    },

    /**
     * Set IsAttempt
     * True if the operation is an attempt, false otherwise
     * @param {bool} val
     * @return {TransactionOperation}
     */
    setIsAttempt: function(val) {
        this._isAttempt = val;
        return this;
    },

    /**
     * Get HasFailed
     * True if the operation has failed, false otherwise
     * @return {bool}
     */
    getHasFailed: function() {
        return this._hasFailed;
    },

    /**
     * Set HasFailed
     * True if the operation has failed, false otherwise
     * @param {bool} val
     * @return {TransactionOperation}
     */
    setHasFailed: function(val) {
        this._hasFailed = val;
        return this;
    },

    /**
     * Get IsAccountable
     * True if the operation amount can be accounted for, false otherwise
     * @return {bool}
     */
    getIsAccountable: function() {
        return this._isAccountable;
    },

    /**
     * Set IsAccountable
     * True if the operation amount can be accounted for, false otherwise
     * @param {bool} val
     * @return {TransactionOperation}
     */
    setIsAccountable: function(val) {
        this._isAccountable = val;
        return this;
    },

    /**
     * Get Type
     * Type of the operation, such as authorization, capture, refund or void
     * @return {string}
     */
    getType: function() {
        return this._type;
    },

    /**
     * Set Type
     * Type of the operation, such as authorization, capture, refund or void
     * @param {string} val
     * @return {TransactionOperation}
     */
    setType: function(val) {
        this._type = val;
        return this;
    },

    /**
     * Get GatewayOperationId
     * ID of the operation done through the PSP
     * @return {string}
     */
    getGatewayOperationId: function() {
        return this._gatewayOperationId;
    },

    /**
     * Set GatewayOperationId
     * ID of the operation done through the PSP
     * @param {string} val
     * @return {TransactionOperation}
     */
    setGatewayOperationId: function(val) {
        this._gatewayOperationId = val;
        return this;
    },

    /**
     * Get ErrorCode
     * Error code returned when attempting the operation, if any
     * @return {string}
     */
    getErrorCode: function() {
        return this._errorCode;
    },

    /**
     * Set ErrorCode
     * Error code returned when attempting the operation, if any
     * @param {string} val
     * @return {TransactionOperation}
     */
    setErrorCode: function(val) {
        this._errorCode = val;
        return this;
    },

    /**
     * Get GatewayData
     * Additionnal context saved when processing the transaction on the specific PSP
     * @return {object}
     */
    getGatewayData: function() {
        return this._gatewayData;
    },

    /**
     * Set GatewayData
     * Additionnal context saved when processing the transaction on the specific PSP
     * @param {object} val
     * @return {TransactionOperation}
     */
    setGatewayData: function(val) {
        this._gatewayData = val;
        return this;
    },

    /**
     * Get PaymentDataThreeDSRequest
     * ThreeDS request payment data (read-only)
     * @return {object}
     */
    getPaymentDataThreeDSRequest: function() {
        return this._paymentDataThreeDSRequest;
    },

    /**
     * Set PaymentDataThreeDSRequest
     * ThreeDS request payment data (read-only)
     * @param {object} val
     * @return {TransactionOperation}
     */
    setPaymentDataThreeDSRequest: function(val) {
        if (typeof val.getClass === "function" &&
            val.getClass() == this._client.newPaymentDataThreeDSRequest().getClass())
            this._paymentDataThreeDSRequest = val;
        else {
            var obj = this._client.newPaymentDataThreeDSRequest();
            obj.fillWithData(val);
            this._paymentDataThreeDSRequest = obj;
        }
        return this;
    },

    /**
     * Get PaymentDataThreeDSAuthentication
     * 3-D Secure authentication payment data (read-only)
     * @return {object}
     */
    getPaymentDataThreeDSAuthentication: function() {
        return this._paymentDataThreeDSAuthentication;
    },

    /**
     * Set PaymentDataThreeDSAuthentication
     * 3-D Secure authentication payment data (read-only)
     * @param {object} val
     * @return {TransactionOperation}
     */
    setPaymentDataThreeDSAuthentication: function(val) {
        if (typeof val.getClass === "function" &&
            val.getClass() == this._client.newPaymentDataThreeDSAuthentication().getClass())
            this._paymentDataThreeDSAuthentication = val;
        else {
            var obj = this._client.newPaymentDataThreeDSAuthentication();
            obj.fillWithData(val);
            this._paymentDataThreeDSAuthentication = obj;
        }
        return this;
    },

    /**
     * Get PaymentDataNetworkAuthentication
     * Network authentication payment data (read-only)
     * @return {object}
     */
    getPaymentDataNetworkAuthentication: function() {
        return this._paymentDataNetworkAuthentication;
    },

    /**
     * Set PaymentDataNetworkAuthentication
     * Network authentication payment data (read-only)
     * @param {object} val
     * @return {TransactionOperation}
     */
    setPaymentDataNetworkAuthentication: function(val) {
        if (typeof val.getClass === "function" &&
            val.getClass() == this._client.newPaymentDataNetworkAuthentication().getClass())
            this._paymentDataNetworkAuthentication = val;
        else {
            var obj = this._client.newPaymentDataNetworkAuthentication();
            obj.fillWithData(val);
            this._paymentDataNetworkAuthentication = obj;
        }
        return this;
    },

    /**
     * Get Metadata
     * Metadata related to the operation, in the form of a dictionary (key-value pair)
     * @return {object}
     */
    getMetadata: function() {
        return this._metadata;
    },

    /**
     * Set Metadata
     * Metadata related to the operation, in the form of a dictionary (key-value pair)
     * @param {object} val
     * @return {TransactionOperation}
     */
    setMetadata: function(val) {
        this._metadata = val;
        return this;
    },

    /**
     * Get GatewayFee
     * Gateway fee generated by the operation
     * @return {string}
     */
    getGatewayFee: function() {
        return this._gatewayFee;
    },

    /**
     * Set GatewayFee
     * Gateway fee generated by the operation
     * @param {string} val
     * @return {TransactionOperation}
     */
    setGatewayFee: function(val) {
        this._gatewayFee = val;
        return this;
    },

    /**
     * Get CreatedAt
     * Date at which the operation was created
     * @return {string}
     */
    getCreatedAt: function() {
        return this._createdAt;
    },

    /**
     * Set CreatedAt
     * Date at which the operation was created
     * @param {string} val
     * @return {TransactionOperation}
     */
    setCreatedAt: function(val) {
        this._createdAt = val;
        return this;
    },

    /**
     * Fills the current object with the new values pulled from the data
     * @param  {array} data
     * @return {TransactionOperation}
     */
    fillWithData: function(data) {
        if (data["id"])
            this.setId(data["id"]);
        if (data["transaction"])
            this.setTransaction(data["transaction"]);
        if (data["transaction_id"])
            this.setTransactionId(data["transaction_id"]);
        if (data["token"])
            this.setToken(data["token"]);
        if (data["token_id"])
            this.setTokenId(data["token_id"]);
        if (data["card"])
            this.setCard(data["card"]);
        if (data["card_id"])
            this.setCardId(data["card_id"]);
        if (data["amount"])
            this.setAmount(data["amount"]);
        if (data["is_attempt"])
            this.setIsAttempt(data["is_attempt"]);
        if (data["has_failed"])
            this.setHasFailed(data["has_failed"]);
        if (data["is_accountable"])
            this.setIsAccountable(data["is_accountable"]);
        if (data["type"])
            this.setType(data["type"]);
        if (data["gateway_operation_id"])
            this.setGatewayOperationId(data["gateway_operation_id"]);
        if (data["error_code"])
            this.setErrorCode(data["error_code"]);
        if (data["gateway_data"])
            this.setGatewayData(data["gateway_data"]);
        if (data["payment_data_three_d_s_request"])
            this.setPaymentDataThreeDSRequest(data["payment_data_three_d_s_request"]);
        if (data["payment_data_three_d_s_authentication"])
            this.setPaymentDataThreeDSAuthentication(data["payment_data_three_d_s_authentication"]);
        if (data["payment_data_network_authentication"])
            this.setPaymentDataNetworkAuthentication(data["payment_data_network_authentication"]);
        if (data["metadata"])
            this.setMetadata(data["metadata"]);
        if (data["gateway_fee"])
            this.setGatewayFee(data["gateway_fee"]);
        if (data["created_at"])
            this.setCreatedAt(data["created_at"]);
        return this;
    },

    
}, {});
