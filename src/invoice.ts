// The content of this file was automatically generated

import Promise    = require('promise');
import ProcessOut = require('./processout');
import Response   = require('./networking/response');
import Request    = require('./networking/request');

import ProcessOutNetworkError = require('./errors/processoutnetworkerror');

import * as p from '.';

class Invoice {
    private client: ProcessOut = null;

    /**
     * ID of the invoice
     * @type {string}
     */
    private id: string = null;

    /**
     * Project to which the invoice belongs
     * @type {p.Project}
     */
    private project: p.Project = null;

    /**
     * ID of the project to which the invoice belongs
     * @type {string}
     */
    private projectId: string = null;

    /**
     * Transaction generated by the invoice
     * @type {p.Transaction}
     */
    private transaction: p.Transaction = null;

    /**
     * ID of the transaction generated by the invoice
     * @type {string}
     */
    private transactionId: string = null;

    /**
     * Customer linked to the invoice, if any
     * @type {p.Customer}
     */
    private customer: p.Customer = null;

    /**
     * ID of the customer linked to the invoice, if any
     * @type {string}
     */
    private customerId: string = null;

    /**
     * Subscription to which the invoice is linked to, if any
     * @type {p.Subscription}
     */
    private subscription: p.Subscription = null;

    /**
     * ID of the subscription to which the invoice is linked to, if any
     * @type {string}
     */
    private subscriptionId: string = null;

    /**
     * Token used to pay the invoice, if any
     * @type {p.Token}
     */
    private token: p.Token = null;

    /**
     * ID of the token used to pay the invoice, if any
     * @type {string}
     */
    private tokenId: string = null;

    /**
     * Details of the invoice
     * @type {any}
     */
    private details: any = null;

    /**
     * URL to which you may redirect your customer to proceed with the payment
     * @type {string}
     */
    private url: string = null;

    /**
     * Name of the invoice
     * @type {string}
     */
    private name: string = null;

    /**
     * Amount to be paid
     * @type {string}
     */
    private amount: string = null;

    /**
     * Currency of the invoice
     * @type {string}
     */
    private currency: string = null;

    /**
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @type {string}
     */
    private merchantInitiatorType: string = null;

    /**
     * Statement to be shown on the bank statement of your customer
     * @type {string}
     */
    private statementDescriptor: string = null;

    /**
     * Support phone number shown on the customer's bank statement
     * @type {string}
     */
    private statementDescriptorPhone: string = null;

    /**
     * City shown on the customer's bank statement
     * @type {string}
     */
    private statementDescriptorCity: string = null;

    /**
     * Your company name shown on the customer's bank statement
     * @type {string}
     */
    private statementDescriptorCompany: string = null;

    /**
     * URL shown on the customer's bank statement
     * @type {string}
     */
    private statementDescriptorUrl: string = null;

    /**
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @type {any}
     */
    private metadata: any = null;

    /**
     * URL where the customer will be redirected upon payment
     * @type {string}
     */
    private returnUrl: string = null;

    /**
     * URL where the customer will be redirected if the payment was canceled
     * @type {string}
     */
    private cancelUrl: string = null;

    /**
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @type {string}
     */
    private webhookUrl: string = null;

    /**
     * Define whether or not the invoice is in sandbox environment
     * @type {boolean}
     */
    private sandbox: boolean = null;

    /**
     * Date at which the invoice was created
     * @type {string}
     */
    private createdAt: string = null;

    /**
     * Risk information
     * @type {p.InvoiceRisk}
     */
    private risk: p.InvoiceRisk = null;

    /**
     * Shipping information
     * @type {p.InvoiceShipping}
     */
    private shipping: p.InvoiceShipping = null;

    /**
     * Device information
     * @type {p.InvoiceDevice}
     */
    private device: p.InvoiceDevice = null;

    /**
     * Invoice constructor
     * @param {ProcessOut} client
     * @param {array} prefill (optional)
     */
    constructor(client: ProcessOut, prefill: Invoice) {
        if (typeof client === 'undefined')
            throw new Error("The Invoice object must be instanciated with the ProcessOut client. You can create one using new ProcessOut('project-id', 'project-secret').newInvoice()");

        this.client = client;
        if (typeof prefill !== 'undefined')
            this.fillWithData(prefill);
    }

    public getProcessOutObjectClass(): string {
        return "Invoice";
    }

    /**
     * Get Id
     * ID of the invoice
     * @return {string}
     */
    public getId(): string {
        return this.id;
    }

    /**
     * Set Id
     * ID of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    public setId(val: string): Invoice {
        this.id = val;
        return this;
    }

    /**
     * Get Project
     * Project to which the invoice belongs
     * @return {p.Project}
     */
    public getProject(): p.Project {
        return this.project;
    }

    /**
     * Set Project
     * Project to which the invoice belongs
     * @param {p.Project} val
     * @return {Invoice}
     */
    public setProject(val: p.Project): Invoice {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newProject().getProcessOutObjectClass())
            this.project = val;
        else {
            var obj = this.client.newProject();
            obj.fillWithData(val);
            this.project = obj;
        }
        return this;
    }

    /**
     * Get ProjectId
     * ID of the project to which the invoice belongs
     * @return {string}
     */
    public getProjectId(): string {
        return this.projectId;
    }

    /**
     * Set ProjectId
     * ID of the project to which the invoice belongs
     * @param {string} val
     * @return {Invoice}
     */
    public setProjectId(val: string): Invoice {
        this.projectId = val;
        return this;
    }

    /**
     * Get Transaction
     * Transaction generated by the invoice
     * @return {p.Transaction}
     */
    public getTransaction(): p.Transaction {
        return this.transaction;
    }

    /**
     * Set Transaction
     * Transaction generated by the invoice
     * @param {p.Transaction} val
     * @return {Invoice}
     */
    public setTransaction(val: p.Transaction): Invoice {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newTransaction().getProcessOutObjectClass())
            this.transaction = val;
        else {
            var obj = this.client.newTransaction();
            obj.fillWithData(val);
            this.transaction = obj;
        }
        return this;
    }

    /**
     * Get TransactionId
     * ID of the transaction generated by the invoice
     * @return {string}
     */
    public getTransactionId(): string {
        return this.transactionId;
    }

    /**
     * Set TransactionId
     * ID of the transaction generated by the invoice
     * @param {string} val
     * @return {Invoice}
     */
    public setTransactionId(val: string): Invoice {
        this.transactionId = val;
        return this;
    }

    /**
     * Get Customer
     * Customer linked to the invoice, if any
     * @return {p.Customer}
     */
    public getCustomer(): p.Customer {
        return this.customer;
    }

    /**
     * Set Customer
     * Customer linked to the invoice, if any
     * @param {p.Customer} val
     * @return {Invoice}
     */
    public setCustomer(val: p.Customer): Invoice {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newCustomer().getProcessOutObjectClass())
            this.customer = val;
        else {
            var obj = this.client.newCustomer();
            obj.fillWithData(val);
            this.customer = obj;
        }
        return this;
    }

    /**
     * Get CustomerId
     * ID of the customer linked to the invoice, if any
     * @return {string}
     */
    public getCustomerId(): string {
        return this.customerId;
    }

    /**
     * Set CustomerId
     * ID of the customer linked to the invoice, if any
     * @param {string} val
     * @return {Invoice}
     */
    public setCustomerId(val: string): Invoice {
        this.customerId = val;
        return this;
    }

    /**
     * Get Subscription
     * Subscription to which the invoice is linked to, if any
     * @return {p.Subscription}
     */
    public getSubscription(): p.Subscription {
        return this.subscription;
    }

    /**
     * Set Subscription
     * Subscription to which the invoice is linked to, if any
     * @param {p.Subscription} val
     * @return {Invoice}
     */
    public setSubscription(val: p.Subscription): Invoice {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newSubscription().getProcessOutObjectClass())
            this.subscription = val;
        else {
            var obj = this.client.newSubscription();
            obj.fillWithData(val);
            this.subscription = obj;
        }
        return this;
    }

    /**
     * Get SubscriptionId
     * ID of the subscription to which the invoice is linked to, if any
     * @return {string}
     */
    public getSubscriptionId(): string {
        return this.subscriptionId;
    }

    /**
     * Set SubscriptionId
     * ID of the subscription to which the invoice is linked to, if any
     * @param {string} val
     * @return {Invoice}
     */
    public setSubscriptionId(val: string): Invoice {
        this.subscriptionId = val;
        return this;
    }

    /**
     * Get Token
     * Token used to pay the invoice, if any
     * @return {p.Token}
     */
    public getToken(): p.Token {
        return this.token;
    }

    /**
     * Set Token
     * Token used to pay the invoice, if any
     * @param {p.Token} val
     * @return {Invoice}
     */
    public setToken(val: p.Token): Invoice {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newToken().getProcessOutObjectClass())
            this.token = val;
        else {
            var obj = this.client.newToken();
            obj.fillWithData(val);
            this.token = obj;
        }
        return this;
    }

    /**
     * Get TokenId
     * ID of the token used to pay the invoice, if any
     * @return {string}
     */
    public getTokenId(): string {
        return this.tokenId;
    }

    /**
     * Set TokenId
     * ID of the token used to pay the invoice, if any
     * @param {string} val
     * @return {Invoice}
     */
    public setTokenId(val: string): Invoice {
        this.tokenId = val;
        return this;
    }

    /**
     * Get Details
     * Details of the invoice
     * @return {any}
     */
    public getDetails(): any {
        return this.details;
    }

    /**
     * Set Details
     * Details of the invoice
     * @param {any} val
     * @return {Invoice}
     */
    public setDetails(val: any): Invoice {
        if (val.length > 0 && typeof val[0] === 'object')
            this.details = val;
        else {
            var a = [];
            for (var i = val.length; i--;) {
                var obj = this.client.newInvoiceDetail();
                obj.fillWithData(val);
                a.push(obj);
            }
            this.details = a;
        }
        return this;
    }

    /**
     * Get Url
     * URL to which you may redirect your customer to proceed with the payment
     * @return {string}
     */
    public getUrl(): string {
        return this.url;
    }

    /**
     * Set Url
     * URL to which you may redirect your customer to proceed with the payment
     * @param {string} val
     * @return {Invoice}
     */
    public setUrl(val: string): Invoice {
        this.url = val;
        return this;
    }

    /**
     * Get Name
     * Name of the invoice
     * @return {string}
     */
    public getName(): string {
        return this.name;
    }

    /**
     * Set Name
     * Name of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    public setName(val: string): Invoice {
        this.name = val;
        return this;
    }

    /**
     * Get Amount
     * Amount to be paid
     * @return {string}
     */
    public getAmount(): string {
        return this.amount;
    }

    /**
     * Set Amount
     * Amount to be paid
     * @param {string} val
     * @return {Invoice}
     */
    public setAmount(val: string): Invoice {
        this.amount = val;
        return this;
    }

    /**
     * Get Currency
     * Currency of the invoice
     * @return {string}
     */
    public getCurrency(): string {
        return this.currency;
    }

    /**
     * Set Currency
     * Currency of the invoice
     * @param {string} val
     * @return {Invoice}
     */
    public setCurrency(val: string): Invoice {
        this.currency = val;
        return this;
    }

    /**
     * Get MerchantInitiatorType
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @return {string}
     */
    public getMerchantInitiatorType(): string {
        return this.merchantInitiatorType;
    }

    /**
     * Set MerchantInitiatorType
     * Type of the transaction initiated by the merchant (off-session). Can be either one-off or recurring, depending on the nature of the merchant initiated transaction.
     * @param {string} val
     * @return {Invoice}
     */
    public setMerchantInitiatorType(val: string): Invoice {
        this.merchantInitiatorType = val;
        return this;
    }

    /**
     * Get StatementDescriptor
     * Statement to be shown on the bank statement of your customer
     * @return {string}
     */
    public getStatementDescriptor(): string {
        return this.statementDescriptor;
    }

    /**
     * Set StatementDescriptor
     * Statement to be shown on the bank statement of your customer
     * @param {string} val
     * @return {Invoice}
     */
    public setStatementDescriptor(val: string): Invoice {
        this.statementDescriptor = val;
        return this;
    }

    /**
     * Get StatementDescriptorPhone
     * Support phone number shown on the customer's bank statement
     * @return {string}
     */
    public getStatementDescriptorPhone(): string {
        return this.statementDescriptorPhone;
    }

    /**
     * Set StatementDescriptorPhone
     * Support phone number shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    public setStatementDescriptorPhone(val: string): Invoice {
        this.statementDescriptorPhone = val;
        return this;
    }

    /**
     * Get StatementDescriptorCity
     * City shown on the customer's bank statement
     * @return {string}
     */
    public getStatementDescriptorCity(): string {
        return this.statementDescriptorCity;
    }

    /**
     * Set StatementDescriptorCity
     * City shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    public setStatementDescriptorCity(val: string): Invoice {
        this.statementDescriptorCity = val;
        return this;
    }

    /**
     * Get StatementDescriptorCompany
     * Your company name shown on the customer's bank statement
     * @return {string}
     */
    public getStatementDescriptorCompany(): string {
        return this.statementDescriptorCompany;
    }

    /**
     * Set StatementDescriptorCompany
     * Your company name shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    public setStatementDescriptorCompany(val: string): Invoice {
        this.statementDescriptorCompany = val;
        return this;
    }

    /**
     * Get StatementDescriptorUrl
     * URL shown on the customer's bank statement
     * @return {string}
     */
    public getStatementDescriptorUrl(): string {
        return this.statementDescriptorUrl;
    }

    /**
     * Set StatementDescriptorUrl
     * URL shown on the customer's bank statement
     * @param {string} val
     * @return {Invoice}
     */
    public setStatementDescriptorUrl(val: string): Invoice {
        this.statementDescriptorUrl = val;
        return this;
    }

    /**
     * Get Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @return {any}
     */
    public getMetadata(): any {
        return this.metadata;
    }

    /**
     * Set Metadata
     * Metadata related to the invoice, in the form of a dictionary (key-value pair)
     * @param {any} val
     * @return {Invoice}
     */
    public setMetadata(val: any): Invoice {
        this.metadata = val;
        return this;
    }

    /**
     * Get ReturnUrl
     * URL where the customer will be redirected upon payment
     * @return {string}
     */
    public getReturnUrl(): string {
        return this.returnUrl;
    }

    /**
     * Set ReturnUrl
     * URL where the customer will be redirected upon payment
     * @param {string} val
     * @return {Invoice}
     */
    public setReturnUrl(val: string): Invoice {
        this.returnUrl = val;
        return this;
    }

    /**
     * Get CancelUrl
     * URL where the customer will be redirected if the payment was canceled
     * @return {string}
     */
    public getCancelUrl(): string {
        return this.cancelUrl;
    }

    /**
     * Set CancelUrl
     * URL where the customer will be redirected if the payment was canceled
     * @param {string} val
     * @return {Invoice}
     */
    public setCancelUrl(val: string): Invoice {
        this.cancelUrl = val;
        return this;
    }

    /**
     * Get WebhookUrl
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @return {string}
     */
    public getWebhookUrl(): string {
        return this.webhookUrl;
    }

    /**
     * Set WebhookUrl
     * Custom webhook URL where updates about this specific payment will be sent, on top of your project-wide URLs
     * @param {string} val
     * @return {Invoice}
     */
    public setWebhookUrl(val: string): Invoice {
        this.webhookUrl = val;
        return this;
    }

    /**
     * Get Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @return {boolean}
     */
    public getSandbox(): boolean {
        return this.sandbox;
    }

    /**
     * Set Sandbox
     * Define whether or not the invoice is in sandbox environment
     * @param {boolean} val
     * @return {Invoice}
     */
    public setSandbox(val: boolean): Invoice {
        this.sandbox = val;
        return this;
    }

    /**
     * Get CreatedAt
     * Date at which the invoice was created
     * @return {string}
     */
    public getCreatedAt(): string {
        return this.createdAt;
    }

    /**
     * Set CreatedAt
     * Date at which the invoice was created
     * @param {string} val
     * @return {Invoice}
     */
    public setCreatedAt(val: string): Invoice {
        this.createdAt = val;
        return this;
    }

    /**
     * Get Risk
     * Risk information
     * @return {p.InvoiceRisk}
     */
    public getRisk(): p.InvoiceRisk {
        return this.risk;
    }

    /**
     * Set Risk
     * Risk information
     * @param {p.InvoiceRisk} val
     * @return {Invoice}
     */
    public setRisk(val: p.InvoiceRisk): Invoice {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newInvoiceRisk().getProcessOutObjectClass())
            this.risk = val;
        else {
            var obj = this.client.newInvoiceRisk();
            obj.fillWithData(val);
            this.risk = obj;
        }
        return this;
    }

    /**
     * Get Shipping
     * Shipping information
     * @return {p.InvoiceShipping}
     */
    public getShipping(): p.InvoiceShipping {
        return this.shipping;
    }

    /**
     * Set Shipping
     * Shipping information
     * @param {p.InvoiceShipping} val
     * @return {Invoice}
     */
    public setShipping(val: p.InvoiceShipping): Invoice {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newInvoiceShipping().getProcessOutObjectClass())
            this.shipping = val;
        else {
            var obj = this.client.newInvoiceShipping();
            obj.fillWithData(val);
            this.shipping = obj;
        }
        return this;
    }

    /**
     * Get Device
     * Device information
     * @return {p.InvoiceDevice}
     */
    public getDevice(): p.InvoiceDevice {
        return this.device;
    }

    /**
     * Set Device
     * Device information
     * @param {p.InvoiceDevice} val
     * @return {Invoice}
     */
    public setDevice(val: p.InvoiceDevice): Invoice {
        if (val.getProcessOutObjectClass &&
            val.getProcessOutObjectClass() == this.client.newInvoiceDevice().getProcessOutObjectClass())
            this.device = val;
        else {
            var obj = this.client.newInvoiceDevice();
            obj.fillWithData(val);
            this.device = obj;
        }
        return this;
    }

    /**
     * Fills the current object with the new values pulled from the data
     * @param  {array} data
     * @return {Invoice}
     */
    public fillWithData(data: any): Invoice {
        if (data["id"])
            this.setId(data["id"]);
        if (data["project"])
            this.setProject(data["project"]);
        if (data["project_id"])
            this.setProjectId(data["project_id"]);
        if (data["transaction"])
            this.setTransaction(data["transaction"]);
        if (data["transaction_id"])
            this.setTransactionId(data["transaction_id"]);
        if (data["customer"])
            this.setCustomer(data["customer"]);
        if (data["customer_id"])
            this.setCustomerId(data["customer_id"]);
        if (data["subscription"])
            this.setSubscription(data["subscription"]);
        if (data["subscription_id"])
            this.setSubscriptionId(data["subscription_id"]);
        if (data["token"])
            this.setToken(data["token"]);
        if (data["token_id"])
            this.setTokenId(data["token_id"]);
        if (data["details"])
            this.setDetails(data["details"]);
        if (data["url"])
            this.setUrl(data["url"]);
        if (data["name"])
            this.setName(data["name"]);
        if (data["amount"])
            this.setAmount(data["amount"]);
        if (data["currency"])
            this.setCurrency(data["currency"]);
        if (data["merchant_initiator_type"])
            this.setMerchantInitiatorType(data["merchant_initiator_type"]);
        if (data["statement_descriptor"])
            this.setStatementDescriptor(data["statement_descriptor"]);
        if (data["statement_descriptor_phone"])
            this.setStatementDescriptorPhone(data["statement_descriptor_phone"]);
        if (data["statement_descriptor_city"])
            this.setStatementDescriptorCity(data["statement_descriptor_city"]);
        if (data["statement_descriptor_company"])
            this.setStatementDescriptorCompany(data["statement_descriptor_company"]);
        if (data["statement_descriptor_url"])
            this.setStatementDescriptorUrl(data["statement_descriptor_url"]);
        if (data["metadata"])
            this.setMetadata(data["metadata"]);
        if (data["return_url"])
            this.setReturnUrl(data["return_url"]);
        if (data["cancel_url"])
            this.setCancelUrl(data["cancel_url"]);
        if (data["webhook_url"])
            this.setWebhookUrl(data["webhook_url"]);
        if (data["sandbox"])
            this.setSandbox(data["sandbox"]);
        if (data["created_at"])
            this.setCreatedAt(data["created_at"]);
        if (data["risk"])
            this.setRisk(data["risk"]);
        if (data["shipping"])
            this.setShipping(data["shipping"]);
        if (data["device"])
            this.setDevice(data["device"]);
        return this;
    }

    /**
     * Authorize the invoice using the given source (customer or token)
	 * @param string source
     * @param {any} options
     * @return {Transaction}
     */
    public authorize(source, options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/authorize";

        var data = {
			'synchronous': (options['synchronous']) ? options['synchronous'] : null, 
			'retry_drop_liability_shift': (options['retry_drop_liability_shift']) ? options['retry_drop_liability_shift'] : null, 
			'capture_amount': (options['capture_amount']) ? options['capture_amount'] : null, 
			'enable_three_d_s_2': (options['enable_three_d_s_2']) ? options['enable_three_d_s_2'] : null, 
			'auto_capture_at': (options['auto_capture_at']) ? options['auto_capture_at'] : null, 
			'source': source
        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['transaction'];
                var obj = cur.client.newTransaction();
                returnValues.push(obj.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.post(path, data, options, callback);
            });
    }
    /**
     * Capture the invoice using the given source (customer or token)
	 * @param string source
     * @param {any} options
     * @return {Transaction}
     */
    public capture(source, options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/capture";

        var data = {
			'authorize_only': (options['authorize_only']) ? options['authorize_only'] : null, 
			'synchronous': (options['synchronous']) ? options['synchronous'] : null, 
			'retry_drop_liability_shift': (options['retry_drop_liability_shift']) ? options['retry_drop_liability_shift'] : null, 
			'capture_amount': (options['capture_amount']) ? options['capture_amount'] : null, 
			'auto_capture_at': (options['auto_capture_at']) ? options['auto_capture_at'] : null, 
			'enable_three_d_s_2': (options['enable_three_d_s_2']) ? options['enable_three_d_s_2'] : null, 
			'source': source
        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['transaction'];
                var obj = cur.client.newTransaction();
                returnValues.push(obj.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.post(path, data, options, callback);
            });
    }
    /**
     * Get the customer linked to the invoice.

     * @param {any} options
     * @return {Customer}
     */
    public fetchCustomer(options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/customers";

        var data = {

        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['customer'];
                var obj = cur.client.newCustomer();
                returnValues.push(obj.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.get(path, data, options, callback);
            });
    }
    /**
     * Assign a customer to the invoice.
	 * @param string customerId
     * @param {any} options
     * @return {Customer}
     */
    public assignCustomer(customerId, options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/customers";

        var data = {
			'customer_id': customerId
        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['customer'];
                var obj = cur.client.newCustomer();
                returnValues.push(obj.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.post(path, data, options, callback);
            });
    }
    /**
     * Initiate a 3-D Secure authentication
	 * @param string source
     * @param {any} options
     * @return {CustomerAction}
     */
    public initiateThreeDS(source, options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/three-d-s";

        var data = {
			'enable_three_d_s_2': (options['enable_three_d_s_2']) ? options['enable_three_d_s_2'] : null, 
			'source': source
        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['customer_action'];
                var obj = cur.client.newCustomerAction();
                returnValues.push(obj.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.post(path, data, options, callback);
            });
    }
    /**
     * Get the transaction of the invoice.

     * @param {any} options
     * @return {Transaction}
     */
    public fetchTransaction(options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/transactions";

        var data = {

        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['transaction'];
                var obj = cur.client.newTransaction();
                returnValues.push(obj.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.get(path, data, options, callback);
            });
    }
    /**
     * Void the invoice

     * @param {any} options
     * @return {Transaction}
     */
    public void(options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices/" + encodeURI(this.getId()) + "/void";

        var data = {

        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['transaction'];
                var obj = cur.client.newTransaction();
                returnValues.push(obj.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.post(path, data, options, callback);
            });
    }
    /**
     * Get all the invoices.
     * 
     * @param {any} options
     * @return {array}
     */
    public all(options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices";

        var data = {

        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var a    = [];
                var body = response.body['invoices'];
                for (var i = body.length; i--;) {
                    var tmp = cur.client.newInvoice();
                    tmp.fillWithData(body[i]);
                    a.push(tmp);
                }

                returnValues.push(a);
                    

                return resolve.apply(this, returnValues);
            };

            request.get(path, data, options, callback);
            });
    }
    /**
     * Create a new invoice.
     * 
     * @param {any} options
     * @return {this}
     */
    public create(options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices";

        var data = {
			'customer_id': this.getCustomerId(), 
			'name': this.getName(), 
			'amount': this.getAmount(), 
			'currency': this.getCurrency(), 
			'metadata': this.getMetadata(), 
			'details': this.getDetails(), 
			'merchant_initiator_type': this.getMerchantInitiatorType(), 
			'statement_descriptor': this.getStatementDescriptor(), 
			'statement_descriptor_phone': this.getStatementDescriptorPhone(), 
			'statement_descriptor_city': this.getStatementDescriptorCity(), 
			'statement_descriptor_company': this.getStatementDescriptorCompany(), 
			'statement_descriptor_url': this.getStatementDescriptorUrl(), 
			'return_url': this.getReturnUrl(), 
			'cancel_url': this.getCancelUrl(), 
			'webhook_url': this.getWebhookUrl(), 
			'risk': this.getRisk(), 
			'shipping': this.getShipping(), 
			'device': this.getDevice()
        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['invoice'];
                        
                returnValues.push(cur.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.post(path, data, options, callback);
            });
    }
    /**
     * Find an invoice by its ID.
	 * @param string invoiceId
     * @param {any} options
     * @return {this}
     */
    public find(invoiceId, options): Promise<any> {
        if (!options) options = {};
        this.fillWithData(options);

        var request = new Request(this.client);
        var path    = "/invoices/" + encodeURI(invoiceId) + "";

        var data = {

        };

        var cur = this;
        return new Promise(function(resolve, reject) {
            var callback = function(err, resp, body) {
                if (err != null) {
                    return reject(new ProcessOutNetworkError('processout-sdk.network-issue', err.message));
                }

                var response = new Response(body, resp);
                var err      = response.check();
                if (err != null)
                    return reject(err);

                var returnValues = [];

                
                var body = response.body;
                body = body['invoice'];
                        
                returnValues.push(cur.fillWithData(body));

                return resolve.apply(this, returnValues);
            };

            request.get(path, data, options, callback);
            });
    }
    
}
export = Invoice;
